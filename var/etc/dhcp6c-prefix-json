#!/usr/local/bin/python3
#
# *! IMPORTANT !*
#
#  This requires that Opensense pass the "-d" flag to dhcp6c
#  
#  To do this, go to "Interfaces" -> "Settings" and in the "IPv6 DHCP" options, 
#    change the log level to "Info"
#
# Debugging flag
DEBUG = True

# Parse ISC style configuration files (i.e. the dhcp6c.conf file)
#   https://pypi.org/project/iscpy/
#   PIP missing - install PIP on opnsense
#     https://pip.pypa.io/en/stable/installation/
#   https://stackoverflow.com/questions/19212176/parsing-isc-files-with-python-dhcpd-conf-iscpy-module
#   PyPI Version broken-instal here instead (install git first) 
#     https://github.com/egberts/iscpy/issues/1

import json
import re
import os

saveFile = "/var/db/dhcp6c-pds.json"
dhcp6cConfFile = "/var/etc/dhcp6c.conf"
prefixFileTemplate = "/tmp/{}_prefixv6"

# Custom parse: extract all send ia-pd lines for each interface, merging across blocks
iface_pdids = {}
current_iface = None
pd_regex = re.compile(r'^send ia-pd\s+(\d+);')
iface_block_regex = re.compile(r'^interface\s+(\S+)\s*\{')
with open(dhcp6cConfFile, 'r') as f:
    for line in f:
        line_stripped = line.strip()
        iface_match = iface_block_regex.match(line_stripped)
        if iface_match:
            current_iface = iface_match.group(1)
            if current_iface not in iface_pdids:
                iface_pdids[current_iface] = []
        elif current_iface:
            match = pd_regex.match(line_stripped)
            if match:
                pdid = match.group(1)
                if pdid not in iface_pdids[current_iface]:
                    iface_pdids[current_iface].append(pdid)
        if line_stripped.startswith('};'):
            current_iface = None
if DEBUG:
    for iface, pdids in iface_pdids.items():
        print(f"custom parse: {iface} PD IDs: {pdids}")

pdDelegations = {}

for iface, pdids in iface_pdids.items():
    prefix_file = prefixFileTemplate.format(iface)
    if DEBUG:
        print(f"Checking interface: {iface}")
        print(f"  PD IDs: {pdids}")
        print(f"  Prefix file: {prefix_file}")
        print(f"  Exists: {os.path.exists(prefix_file)}")
    if not os.path.exists(prefix_file):
        if DEBUG:
            print(f"  Prefix file for {iface} does not exist, skipping.")
        continue
    with open(prefix_file, 'r') as pf:
        prefixes = [line.strip() for line in pf if line.strip()]
    if DEBUG:
        print(f"  Prefixes found: {prefixes}")
    for pdid, prefix in zip(pdids, prefixes):
        if DEBUG:
            print(f"    Assigning prefix {prefix} to PD {pdid}")
        pdDelegations[pdid] = {
            "prefix": prefix,
            "allocations": False,
            "interfaces": {}
        }

# pdDelegations is already built above from prefix files and config order
# If you need to add interface allocation info, implement it here using your custom parser if needed.

with open(saveFile, 'w+') as fileHandle:
  print(json.dumps(pdDelegations, indent=4), file=fileHandle)
